services:
  bot:
    build:
      context: .
      dockerfile: ./bot/Dockerfile_bot_image
    read_only: false
    image: bot_image
    restart: always 
    container_name: bot_container
    networks:
      - app_network
    env_file:
      - .env
    environment:
      TOKEN: ${TOKEN}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      RM_USER: ${RM_USER}
      RM_PASSWORD: ${RM_PASSWORD}
    depends_on:
      - postgres-master

  postgres-master:
    build:
      context: .
      dockerfile: ./db/Dockerfile_db_image
    image: db_image
    container_name: postgres-master
    restart: always
    healthcheck:
      test: 'pg_isready -U postgres --dbname=postgres'
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_LOG_DIRECTORY: '/var/log/postgresql'
      POSTGRES_LOG_FILENAME: 'postgresql-%Y-%m-%d_%H%M%S.log'
    volumes:
      - ./db/init/master/init.sql:/docker-entrypoint-initdb.d/00_init.sql
      - postgresql_logs:/var/log/postgresql
    networks:
      - app_network
    ports:
      - "5432:5432"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      -c log_replication_commands=on
      -c listen_addresses='*'
      -c logging_collector=on
      -c log_directory='/var/log/postgresql'
      -c log_filename='postgresql.log'
      -c log_statement=all

  postgres-slave:
    build:
      context: .
      dockerfile: ./db_repl/Dockerfile_db_repl_image
    image: db_repl_image
    container_name: postgres-slave
    restart: always 
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    depends_on:
      - postgres-master
    networks:
      - app_network
    ports:
      - "5433:5432"
    user: postgres
    command: |
      bash -c "
      sleep 10
      until pg_basebackup --pgdata=/save/ -R --slot=replication_slot --host=postgres-master --port=5432 --username=${DB_REPL_USER}
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "

networks:
  app_network:
    driver: bridge

volumes:
  postgresql_logs: